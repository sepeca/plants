API: Check Admin Existence
Endpoint: /api/check_admin
Method: GET
Description: Checks if there is an admin user in the database.
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure" }
HOTOVO
-- SERGEI --
Nechapu na co overovat to z frontu
Jestli admin u organizace neexistuje, v jadre DB org nebude existovat
-- SERGEI --
-- odpoved --
Front sa pyta ci existuje admin ucet ak nie tak sa to berie ako prve spustenie aplikacie
-- odpoved --




API: Get Organization Name
Endpoint: /api/get_organization
Method: GET
Description: Retrieves the name of the organization for the login form.
Response:
  - Success: { "organization_name": "Organization Name" }
  - Failure: { "organization_name": null }
GET http://localhost:8080/api/get_organization    ????????????????????? do you need organizationId  ??????????????????????????????????
RESPONSE:
{
    "organizationName": "GreenThumb Inc"
}
TODO


API: Register Admin
Endpoint: /api/register_self
Method: POST
Description: Registers a new admin user and creates an organization.
Request Body:
  - organization: string
  - username: string
  - email: string
  - password: string
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }
-- SERGEI --
proste /register_self
-- SERGEI --
TODO




API: Login
Endpoint: /api/login
Method: POST
Description: Authenticates a user and returns a token.
Request Body:
  - username: string
  - password: string
Response:
  - Success: { "token": "JWT Token", "username": "Username", "role": "Role" }
  - Failure: { "status": "failure", "message": "Invalid credentials" }
-- SERGEI --
proste /login
-- SERGEI --
TODO




API: Get Tasks
Endpoint: /api/get_tasks
Method: GET
Description: Retrieves a list of tasks for the calendar.
Request Parameters:
  - role: string (admin or user)
  - status: string (e.g., "unfinished")
Response:
  - Success: Array of task objects
  - Failure: { "status": "failure", "message": "Error message" }
-- SERGEI --
Requestbody nechej prazdny, vsechno to mame v tokenu
-- SERGEI --




API: Get Task Details
Endpoint: /api/get_task_details
Method: GET
Description: Retrieves detailed information about a specific task.
Request Parameters:
  - id: integer (task ID)
Response:
  - Success: { "id": integer, "last_event": "Date", "caretaker": "Name", "description": "Task description", "photos": ["URL1", "URL2"] }
  - Failure: { "status": "failure", "message": "Error message" }
HOTOVO
-- SERGEI --
Nemamme photos pro task (asi museli by, ale uz pozde to menit)
Get_tasks uz posila vsechno o tasku, neni potreba oddelene ptat o informace oddeleneho tasku
-- SERGEI --
TODO




API: Finish Tasks
Endpoint: /api/finish_tasks
Method: POST
Description: Marks selected tasks as finished.
Request Body:
  - task_ids: array of integers
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }




API: Change Password OR/AND username
Endpoint: /profile
Method: PUT
Description: Allows a user to change their password or username.
Headers:
  - Authorization: Bearer <authToken>
Request Body:
  - username: string -- mighht be not sent
  - newPassword: string -- mighht be not sent
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }




API: Change Password
Endpoint: /api/change_password
Method: POST
Description: Allows a user to change their password.
Headers:
  - Authorization: Bearer <authToken>
Request Body:
  - currentPassword: string
  - newPassword: string
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }
HOTOVO




API: Get Users
Endpoint: /api/get_users
Method: GET
Description: Retrieves a list of all users.
Response:
  - Success: Array of user objects
Example:
    [
        {
            "userId": "4e4d3305-8225-4a21-8c96-25ae0286fde4",
            "name": "Worker1",
            "email": "worker1@greenthumb.com",
            "admin": false
        },
        {
            "userId": "ec37fa26-f6b1-46bc-b219-8a6df04d68a3",
            "name": "NewName",
            "email": "admin@greenthumb.com",
            "admin": true
        },
        {
            "userId": "bd1db3fa-08cf-428c-94e1-4bab9fa4a563",
            "name": "Bob",
            "email": "user@greenthumb.com",
            "admin": true
        }
    ]
  - Failure: { "status": "failure", "message": "Error message" }




API: Add User
Endpoint: /api/add_user
Method: POST
Description: Adds a new user to the system.
Request Body:
  - username: string
  - email: string
  - password: string
  - isAdmin: boolean
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }
-- SERGEI --
proste /register_worker
-- SERGEI --
TODO



API: Delete Users
Endpoint: /api/delete_users
Method: POST
Description: Deletes selected users from the system.
Request Body:
  - userIds: array of integers
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }
HOTOVO




API: Toggle Admin
Endpoint: /api/toggle_admin
Method: POST
Description: Toggles the admin role for a user.
Request Body:
  - userId: integer
  - isAdmin: boolean
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }




API: Add Plant
Endpoint: /api/add_plant
Method: POST
Description: Adds a new plant to the system.
Request Body:
  - plantName: string
  - species: string
  - room: string
  - task: string
  - date: string (YYYY-MM-DD)
  - time: string (HH:MM)
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }
--SERGEI--
RequestBody:
{
  "plantName": "Ficus",
  "species": "Ficus benjamina",
  "locationName": "Greenhouse A",
  "categoryName": "Tropical",
  "humidity": "High",
  "lightRequirements": "Indirect sunlight",
  "water": "Once a week",
  "temperatureRange": "20-25C",
  "imageUrls": [
    "https://yourbucket.supabase.co/storage/v1/object/public/plants/ficus1.jpg",
    "https://yourbucket.supabase.co/storage/v1/object/public/plants/ficus2.jpg"
  ]
}
--SERGEI--
HOTOVO




API: Get Plants
Endpoint: /api/get_plants
Method: GET
Description: Retrieves a list of all plants.
Response:
  - Success: Array of plant objects
  - Failure: { "status": "failure", "message": "Error message" }




API: Delete Plant
Endpoint: /api/delete_plant
Method: POST
Description: Deletes a specific plant.
Request Body:
  - plantId: integer
Response:
  - Success: { "status": "success" }
  - Failure: { "status": "failure", "message": "Error message" }



